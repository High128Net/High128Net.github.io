<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charlie-Amao&#39;s Blog</title>
  
  <subtitle>Make A Difference To The World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://high128net.github.io/"/>
  <updated>2018-01-30T05:38:52.000Z</updated>
  <id>http://high128net.github.io/</id>
  
  <author>
    <name>Charlie-Amao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试篇-数据结构与算法（散列表）</title>
    <link href="http://high128net.github.io/2018/01/30/%E9%9D%A2%E8%AF%95%E7%AF%87-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89/"/>
    <id>http://high128net.github.io/2018/01/30/面试篇-数据结构与算法（散列表）/</id>
    <published>2018-01-30T05:40:22.154Z</published>
    <updated>2018-01-30T05:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="master-researcher-engineer-make-a-difference-to-the-world"><a href="#master-researcher-engineer-make-a-difference-to-the-world" class="headerlink" title="master,researcher,engineer.make a difference to the world."></a><div align="center"><font color="green"><i>master,researcher,engineer.make a difference to the world.</i></font></div></h2><p><font color="red"><strong>注：</strong></font>本文所涉及代码和方法均使用<strong>java</strong>。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><h4 id="HashMap与HashTable的区别"><a href="#HashMap与HashTable的区别" class="headerlink" title="HashMap与HashTable的区别"></a><strong>HashMap与HashTable的区别</strong></h4><p>1、继承类不同，HashTable继承陈旧的Dictionary类，HashMap继承AbstractMap类，两者都实现了Map接口。<br>2、HashTable是同步的，HashMap是非线性安全的，但可在多线程情况下使用Collections.synchronizedMap()方法实现同步。<br>3、HashMap可以允许一个NULL的key，或者允许一个或多个NULL的value，而HashTable不允许存在NUll。<br>4、HashMap可使用方法：containsKey()和containsValue()判断是否存在某一项。<br>综上，我们建议使用HashMap，淘汰使用HashTable。</p><h4 id="HashMap常用方法"><a href="#HashMap常用方法" class="headerlink" title="HashMap常用方法"></a><strong>HashMap常用方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">map.put(key,value);</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">map.get(key);</span><br><span class="line"><span class="comment">//判断是否存在</span></span><br><span class="line">map.containsKey(key);</span><br><span class="line">map.containsValue(value);</span><br></pre></td></tr></table></figure><h4 id="HashMap遍历方法"><a href="#HashMap遍历方法" class="headerlink" title="HashMap遍历方法"></a><strong>HashMap遍历方法</strong></h4><p>1、遍历Map.entrySet()+Iterator：它的每一个元素都是Map.Entry对象，这个对象中，放着的就是Map中的某一对key-value；<br>Iterator方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">map.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">map.put(<span class="string">"key3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.EntrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">    System.out.println(<span class="string">"key:"</span> + entry.getKey());</span><br><span class="line">    System.out.println(<span class="string">"value:"</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for增强方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String,String&gt; entry:map.entrySet())&#123;    </span><br><span class="line">    System.out.println(<span class="string">"key:"</span>+entry.getKey());  </span><br><span class="line">    System.out.println(<span class="string">"value:"</span>+entry.getValue());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、遍历Map.keySet()+for循环：它是Map中key值的集合，我们可以通过遍历这个集合来读取Map中的元素；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">map.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">map.put(<span class="string">"key3"</span>, <span class="string">"value3"</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"key:"</span> + key);</span><br><span class="line">    System.out.println(<span class="string">"value:"</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、遍历Map.values()：它是Map中value的集合，我们可以直接通过这个集合遍历Map中的值，却不能读取key。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String value : map.values())&#123;  </span><br><span class="line">    System.out.println(value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h4><p>1、当需要<strong>对元素进行计数</strong>时，HashMap非常有用，如统计一个字符串中每个字符出现的次数，如控制台输入一句英语，简单统计各个单词出现的次数。<br>2006年google的一道笔试题：在一个字符串中找到第一个只出现一次的字符。如输入abaccdeff，则输出b。（用哈希表解题）<br>方案：第一遍扫描这个数组时，每碰到一个字符，在哈希表中找到对应的项并把出现的次数增加一次。这样在进行第二次扫描时，就能直接从哈希表中得到每个字符出现的次数，遇到第一个value为1的即可返回该key。<br>2、<strong>搜索引擎热点统计（海量数据的top K问题）</strong><br>通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。假设目前有一千万个记录（这些查询串的重复度比较高，虽然总数是1千万，但如果除去重复后，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就是越热门。），请你统计最热门的10个查询串，要求使用的内存不能超过1G。<br>方案：<br>第一步：查询统计（HashMap）<br>维护一个Key为Query字串，Value为该Query出现次数的HashMap，每次读取一个Query，如果该字串不在Map中，那么加入该字串，并且将Value值设为1；如果该字串在Map中，那么将该字串的计数加1即可。<br>第二步：找出TOP K，（top k大用最小堆；top k小用最大堆）<br>构建一个K大小的最小堆，每次新来的value与堆的根节点value比较，如果小于根则丢弃，否则替换根，并进行最小堆的调整；并循环依次处理。<br>3、<strong>HashMap的排序</strong><br><strong>按照key排序：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定排序器</span></span><br><span class="line">TreeMap&lt;String, String&gt; treeMap2 = <span class="keyword">new</span> TreeMap&lt;String, String&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * int compare(Object o1, Object o2) 返回一个基本类型的整型，</span></span><br><span class="line"><span class="comment">     * 返回负数表示：o1 小于o2，</span></span><br><span class="line"><span class="comment">     * 返回0 表示：o1和o2相等，</span></span><br><span class="line"><span class="comment">     * 返回正数表示：o1大于o2。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定排序器按照降序排列</span></span><br><span class="line">        <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">treeMap2.put(<span class="string">"2"</span>, <span class="string">"1"</span>);</span><br><span class="line">treeMap2.put(<span class="string">"b"</span>, <span class="string">"1"</span>);</span><br><span class="line">treeMap2.put(<span class="string">"1"</span>, <span class="string">"1"</span>);</span><br><span class="line">treeMap2.put(<span class="string">"a"</span>, <span class="string">"1"</span>);</span><br><span class="line">System.out.println(<span class="string">"treeMap2="</span> + treeMap2);</span><br></pre></td></tr></table></figure></p><p>小结：<br>1、TreeMap如不指定排序器，默认将按照key值进行升序排序，如果指定了排序器，则按照指定的排序器进行排序。<br>2、具体的排序规则，开发人员可以在int compare()方法中进行指定。<br><strong>按照Value排序：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValueComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; base;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValueComparator</span><span class="params">(Map&lt;String, Integer&gt; base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base = base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (base.get(a) &gt;= base.get(b)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="comment">// returning 0 would merge keys</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Q12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMap</span><span class="params">(Map mp)</span> </span>&#123;</span><br><span class="line">        Iterator it = mp.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Map.Entry pairs = (Map.Entry) it.next();</span><br><span class="line">            System.out.println(pairs.getKey() + <span class="string">" = "</span> + pairs.getValue());</span><br><span class="line">            it.remove(); <span class="comment">// avoids a ConcurrentModificationException</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; countMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        <span class="comment">// add a lot of entries</span></span><br><span class="line">        countMap.put(<span class="string">"a"</span>, <span class="number">10</span>);</span><br><span class="line">        countMap.put(<span class="string">"b"</span>, <span class="number">20</span>);</span><br><span class="line">        ValueComparator vc = <span class="keyword">new</span> ValueComparator(countMap);</span><br><span class="line">        TreeMap&lt;String, Integer&gt; sortedMap = <span class="keyword">new</span> TreeMap&lt;String, Integer&gt;(vc);</span><br><span class="line">        sortedMap.putAll(countMap);</span><br><span class="line">        printMap(sortedMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注：使用了一个比较器Comparator对TreeMap排序，该比较器比较key的方式是取出key对应的value进行大小比较；<br>4、哈希表算法面试题，参考<a href="http://blog.csdn.net/sunxianghuang/article/details/51960123" target="_blank" rel="noopener">博客链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;master-researcher-engineer-make-a-difference-to-the-world&quot;&gt;&lt;a href=&quot;#master-researcher-engineer-make-a-difference-to-the-world&quot; clas
      
    
    </summary>
    
      <category term="面试" scheme="http://high128net.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://high128net.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>面试篇-数据结构与算法（数组）</title>
    <link href="http://high128net.github.io/2018/01/29/%E9%9D%A2%E8%AF%95%E7%AF%87-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E6%95%B0%E7%BB%84%EF%BC%89/"/>
    <id>http://high128net.github.io/2018/01/29/面试篇-数据结构与算法（数组）/</id>
    <published>2018-01-29T13:31:44.207Z</published>
    <updated>2018-01-29T13:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="master-researcher-engineer-make-a-difference-to-the-world"><a href="#master-researcher-engineer-make-a-difference-to-the-world" class="headerlink" title="master,researcher,engineer.make a difference to the world."></a><div align="center"><font color="green"><i>master,researcher,engineer.make a difference to the world.</i></font></div></h2><p><font color="red"><strong>注：</strong></font>本文所涉及代码和方法均使用<strong>java</strong>。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="1-1-定义数组"><a href="#1-1-定义数组" class="headerlink" title="1.1 定义数组"></a>1.1 定义数组</h4><p>格式一：<br>元素类型[] 数组名 = new 元素类型[元素个数或数组长度];<br>格式二：<br>元素类型[] 数组名 = new 元素类型[]{元素，元素，……};<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了一个数组，并且指定了数组的长度，我们这里称它为动态定义</span></span><br><span class="line">String[] aArray = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//在分配内存空间的同时还初始化了值</span></span><br><span class="line">String[] bArray = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>&#125;;</span><br><span class="line">String[] cArray = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>&#125;;</span><br></pre></td></tr></table></figure></p><p><font color="red"><strong>注：</strong></font>给数组分配空间时，必须指定数组能够存储的元素个数来确定数组大小。创建数组之后不能修改数组的大小。可以使用<strong>length属性</strong>获取数组的大小。</p><p><font color="red"><strong>注：</strong></font>下列写法是错误的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="1-2-打印数组元素"><a href="#1-2-打印数组元素" class="headerlink" title="1.2 打印数组元素"></a>1.2 打印数组元素</h4><p>使用方法1：Arrays.toString(array)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">String intArrayString = Arrays.toString(intArray);</span><br><span class="line">System.out.println(intArrayString);</span><br></pre></td></tr></table></figure></p><p>使用方法2：字符串的形式输出,StringUtils.join()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] stringArray = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>&#125;;</span><br><span class="line">System.out.println(StringUtils.join(Arrays.asList(stringArray),<span class="string">","</span>));</span><br></pre></td></tr></table></figure></p><h4 id="1-3-从Array中创建动态数组ArrayList："><a href="#1-3-从Array中创建动态数组ArrayList：" class="headerlink" title="1.3 从Array中创建动态数组ArrayList："></a>1.3 从Array中创建动态数组ArrayList：</h4><p>使用方法：new ArrayList&lt;&gt;(Arrays.asList(array))<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] stringArray = &#123; <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span> &#125;;</span><br><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(stringArray));</span><br><span class="line">System.out.println(arrayList);</span><br></pre></td></tr></table></figure></p><h4 id="1-4-ArrayList转为数组"><a href="#1-4-ArrayList转为数组" class="headerlink" title="1.4 ArrayList转为数组"></a>1.4 ArrayList转为数组</h4><p>使用方法：arrayList.toArray()</p><h4 id="1-5-将Array转成Set集合"><a href="#1-5-将Array转成Set集合" class="headerlink" title="1.5 将Array转成Set集合"></a>1.5 将Array转成Set集合</h4><p>Set集合可自动去重，排序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] stringArray = &#123;<span class="string">"a"</span>,<span class="string">"e"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(stringArray));</span><br><span class="line">System.out.println(set);</span><br><span class="line"><span class="comment">//输出[a, b, c, e]</span></span><br></pre></td></tr></table></figure></p><h4 id="1-6-java-util-Arrays类"><a href="#1-6-java-util-Arrays类" class="headerlink" title="1.6 java.util.Arrays类"></a>1.6 java.util.Arrays类</h4><p>常用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Arrays.toString()</span><br><span class="line">Arrays.deepToString()</span><br><span class="line">Arrays.asList()</span><br><span class="line">Arrays.sort()，（注：可考虑带上<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;&#125;自定义比较器情况）</span><br><span class="line">Arrays.copyOf()</span><br><span class="line">Arrays.copyOfRange()</span><br><span class="line">Arrays.binarySearch()</span><br><span class="line">Arrays.equals()</span><br><span class="line">Arrays.deepEquals()</span><br></pre></td></tr></table></figure></p><h4 id="1-7-二维数组的初始化"><a href="#1-7-二维数组的初始化" class="headerlink" title="1.7 二维数组的初始化"></a>1.7 二维数组的初始化</h4><p>静态初始化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intArray[ ][ ]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></p><p>Java语言中，由于把二维数组看作是数组的数组，数组空间不是连续分配的，所以不要求二维数组每一维的大小相同。<br>动态初始化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure></p><p>二维简单数据类型数组的动态初始化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String s[][] = <span class="keyword">new</span> String[<span class="number">2</span>][];</span><br><span class="line">s[<span class="number">0</span>] = <span class="keyword">new</span> String[<span class="number">2</span>];<span class="comment">//为最高维分配引用空间  </span></span><br><span class="line">s[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">2</span>]; <span class="comment">//为最高维分配引用空间  </span></span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">"Good"</span>);<span class="comment">// 为每个数组元素单独分配空间  </span></span><br><span class="line">s[<span class="number">0</span>][<span class="number">1</span>] = <span class="keyword">new</span> String(<span class="string">"Luck"</span>);<span class="comment">// 为每个数组元素单独分配空间  </span></span><br><span class="line">s[<span class="number">1</span>][<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">"to"</span>);<span class="comment">// 为每个数组元素单独分配空间  </span></span><br><span class="line">s[<span class="number">1</span>][<span class="number">1</span>] = <span class="keyword">new</span> String(<span class="string">"You"</span>);<span class="comment">// 为每个数组元素单独分配空间</span></span><br></pre></td></tr></table></figure></p><p>对二维复合数据类型的数组，必须首先为最高维分配引用空间，然后再顺次为低维分配空间。而且，必须为每个数组元素单独分配空间。</p><h4 id="1-8-ArrayList（动态数组）"><a href="#1-8-ArrayList（动态数组）" class="headerlink" title="1.8 ArrayList（动态数组）"></a>1.8 ArrayList（动态数组）</h4><p>大小：<strong>arrayList.size()</strong><br>遍历方式：<br>迭代器遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; it = arrayList.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    System.out.print(it.next() + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>索引值遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); i++)&#123;</span><br><span class="line">   System.out.print(arrayList.get(i) + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for循环遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Integer number : arrayList)&#123;</span><br><span class="line">   System.out.print(number + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>常用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">ArrayList&lt;Integer&gt; intArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;Integer&gt; intArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(intArray));</span><br><span class="line"><span class="comment">//新增</span></span><br><span class="line">intArrayList.add(E e)</span><br><span class="line">intArrayList.add(<span class="keyword">int</span> index, E element)</span><br><span class="line">intArrayList.addAll(Collection&lt;? extends E&gt; c)</span><br><span class="line">intArrayList.addAll(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line">intArrayList.set(<span class="keyword">int</span> index, E element)</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">intArrayList.remove(<span class="keyword">int</span> index)</span><br><span class="line">intArrayList.remove(Object o)</span><br><span class="line">intArrayList.removeRange(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span><br><span class="line">intArrayList.removeAll()</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">intArrayList.get(<span class="keyword">int</span> index)</span><br><span class="line"><span class="comment">//扩容</span></span><br><span class="line">Arrays.copyOf(intArrayList,newSize)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;master-researcher-engineer-make-a-difference-to-the-world&quot;&gt;&lt;a href=&quot;#master-researcher-engineer-make-a-difference-to-the-world&quot; clas
      
    
    </summary>
    
      <category term="面试" scheme="http://high128net.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://high128net.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j-Cypher语言编程</title>
    <link href="http://high128net.github.io/2018/01/12/Neo4j-Cypher%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    <id>http://high128net.github.io/2018/01/12/Neo4j-Cypher语言编程/</id>
    <published>2018-01-12T12:35:32.000Z</published>
    <updated>2018-01-14T09:23:28.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="master-researcher-engineer-make-a-difference-to-the-world"><a href="#master-researcher-engineer-make-a-difference-to-the-world" class="headerlink" title="master,researcher,engineer.make a difference to the world."></a><div align="center"><font color="green"><i>master,researcher,engineer.make a difference to the world.</i></font></div></h2><h2 id="Neo4j-Cypher语言编程"><a href="#Neo4j-Cypher语言编程" class="headerlink" title="Neo4j Cypher语言编程"></a><font color="purple">Neo4j Cypher语言编程<font></font></font></h2><p>cypher 语言</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;master-researcher-engineer-make-a-difference-to-the-world&quot;&gt;&lt;a href=&quot;#master-researcher-engineer-make-a-difference-to-the-world&quot; clas
      
    
    </summary>
    
      <category term="KnowledgeGraph" scheme="http://high128net.github.io/categories/KnowledgeGraph/"/>
    
    
      <category term="Cypher" scheme="http://high128net.github.io/tags/Cypher/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://high128net.github.io/2018/01/10/hello-world/"/>
    <id>http://high128net.github.io/2018/01/10/hello-world/</id>
    <published>2018-01-10T03:42:00.959Z</published>
    <updated>2018-01-10T03:42:00.958Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
